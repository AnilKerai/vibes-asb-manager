@inherits ComponentBase
@using System.Text.Json
@using System.Xml.Linq

<MudDialog>
    <DialogContent>
        <MudText Typo="Typo.h6">Message @Details.SequenceNumber</MudText>
        <MudText Typo="Typo.caption" Class="mb-2">@(IsDeadLetter ? "Dead-lettered" : "Active")</MudText>

        <MudGrid Class="mb-2">
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="Enqueued" Value="@FormatDate(Details.EnqueuedTime)" ReadOnly="true" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="Delivery Count" Value="@Details.DeliveryCount.ToString()" ReadOnly="true" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="SessionId" Value="@Details.SessionId" ReadOnly="true" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="TTL" Value="@Details.TimeToLive.ToString()" ReadOnly="true" />
            </MudItem>
        </MudGrid>

        @if (!string.IsNullOrWhiteSpace(Details.DeadLetterReason) || !string.IsNullOrWhiteSpace(Details.DeadLetterErrorDescription))
        {
            <MudAlert Severity="Severity.Warning" Variant="Variant.Outlined" Class="mb-2">
                <b>DLQ Reason:</b> @Details.DeadLetterReason<br />
                <b>Description:</b> @Details.DeadLetterErrorDescription
            </MudAlert>
        }

        @if (IsDeadLetter)
        {
            <MudAlert Severity="Severity.Info" Variant="Variant.Outlined" Class="mb-2">
                Replay target: @GetTargetLabel()
            </MudAlert>
        }

        <MudText Typo="Typo.subtitle1" Class="mt-2">Message</MudText>
        <MudGrid Class="mb-2">
            <MudItem xs="12">
                @* Old body input replaced by CodeEditor for better JSON/XML editing *@
                @* <MudTextField T="string" Label="Body" Lines="8" FullWidth="true" @bind-Value="_bodyEdit" ReadOnly="@(!IsDeadLetter)" tabindex="1" /> *@
                <CodeEditor @bind-Value="_bodyEdit" ContentType="_contentTypeEdit" Lines="14" Placeholder="Body" ReadOnly="@(!IsDeadLetter)" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="Subject" @bind-Value="_subjectEdit" ReadOnly="@(!IsDeadLetter)" tabindex="2" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="CorrelationId" @bind-Value="_correlationIdEdit" ReadOnly="@(!IsDeadLetter)" tabindex="3" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="Content Type" @bind-Value="_contentTypeEdit" ReadOnly="@(!IsDeadLetter)" tabindex="4" />
            </MudItem>
            <MudItem xs="12" md="6">
                <MudTextField T="string" Label="MessageId" @bind-Value="_messageIdEdit" ReadOnly="@(!IsDeadLetter)" tabindex="5" />
            </MudItem>
        </MudGrid>

        <MudExpansionPanels Elevation="1" Class="mt-1">
            <MudExpansionPanel Text="Application Properties" Expanded="true">
                <div class="d-flex justify-end mb-1">
                    <MudButton Variant="Variant.Text" Size="Size.Small" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@CopyAppPropsAsJsonAsync">Copy JSON</MudButton>
                </div>
                <KeyValueEditor @bind-Value="_propertyDict" ReadOnly="@(!IsDeadLetter)" />
            </MudExpansionPanel>
            <MudExpansionPanel Text="System Properties" Expanded="false">
                <div class="d-flex justify-end mb-1">
                    <MudButton Variant="Variant.Text" Size="Size.Small" StartIcon="@Icons.Material.Filled.ContentCopy" OnClick="@CopySystemPropsAsJsonAsync">Copy JSON</MudButton>
                </div>
                <KeyValueEditor Value="_systemPropDict" ReadOnly="true" />
            </MudExpansionPanel>
        </MudExpansionPanels>
        @if (IsDeadLetter)
        {
            <MudDivider Class="my-2" />
            <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="2">
                <MudCheckBox T="bool" Label="Also remove original from DLQ after resubmit" @bind-Value="_removeOriginal" tabindex="7" />
                <MudCheckBox T="bool" Label="Generate new MessageId (GUID)" @bind-Value="_generateNewMessageId" tabindex="8" />
            </MudStack>
        }
        @if (OperatingSystem.IsMacCatalyst())
        {
            <MudAlert Severity="Severity.Info" Dense="true" Class="mt-2">
                Tip: On macOS, Tab navigation may be disabled by system settings. Enable "Keyboard navigation" in System Settings â†’ Keyboard to move focus between controls.
            </MudAlert>
        }
    </DialogContent>
    <DialogActions>
        @if (IsDeadLetter)
        {
            <MudButton Color="Color.Primary" Disabled="@(!CanResubmit)" OnClick="@ResubmitAsync" tabindex="9">Resubmit</MudButton>
        }
        <MudButton OnClick="@Close" tabindex="10">Close</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }

    [Parameter] public MessageDetails Details { get; set; } = default!;
    [Parameter] public bool IsDeadLetter { get; set; }
    [Parameter] public string ConnectionString { get; set; } = string.Empty;
    [Parameter] public string? QueueName { get; set; }
    [Parameter] public string? TopicName { get; set; }
    [Parameter] public string? SubscriptionName { get; set; }

    [Inject] private IServiceBusMessaging Messaging { get; set; } = default!;
    [Inject] private ISnackbar Snackbar { get; set; } = default!;
    [Inject] private IJSRuntime JS { get; set; } = default!;

    private bool _initialized;
    private string _bodyEdit = string.Empty;
    private string? _subjectEdit;
    private string? _correlationIdEdit;
    private Dictionary<string, string> _propertyDict = new();
    private Dictionary<string, string> _systemPropDict = new();
    private bool _submitting;
    private string? _contentTypeEdit;
    private string? _messageIdEdit;
    private bool _removeOriginal;
    private bool _generateNewMessageId;

    private string FormatDate(DateTimeOffset dto) => dto.LocalDateTime.ToString("yyyy-MM-dd HH:mm:ss");

    private void Close() => MudDialog?.Close();

    protected override void OnParametersSet()
    {
        if (!_initialized && Details is not null)
        {
            _initialized = true;
            _bodyEdit = Details.Body;
            _subjectEdit = Details.Subject;
            _correlationIdEdit = Details.CorrelationId;
            _contentTypeEdit = Details.ContentType;
            _messageIdEdit = Details.MessageId;
            _propertyDict = Details.ApplicationProperties?.ToDictionary(kv => kv.Key, kv => kv.Value?.ToString() ?? string.Empty)
                           ?? new Dictionary<string, string>(StringComparer.Ordinal);
            TryFormatBodyForDisplay();
            BuildSystemProps();
        }
    }

    private string GetTargetLabel()
        => QueueName is not null ? $"queue '{QueueName}'"
           : TopicName is not null ? $"topic '{TopicName}'"
           : "unknown";

    private bool CanResubmit => IsDeadLetter && !_submitting && !string.IsNullOrWhiteSpace(_bodyEdit) && (!string.IsNullOrWhiteSpace(ConnectionString)) && (QueueName is not null || TopicName is not null);

    private async Task ResubmitAsync()
    {
        if (!CanResubmit) return;
        try
        {
            _submitting = true;
            var props = _propertyDict?.ToDictionary(kv => kv.Key, kv => kv.Value ?? string.Empty)
                        ?? new Dictionary<string, string>();

            var idToUse = _generateNewMessageId ? Guid.NewGuid().ToString() : _messageIdEdit;
            if (_generateNewMessageId)
            {
                // reflect the new id in UI too (optional, dialog will close on success)
                _messageIdEdit = idToUse;
            }

            if (!string.IsNullOrWhiteSpace(QueueName))
            {
                await Messaging.SendToQueueAsync(ConnectionString, QueueName!, _bodyEdit, _subjectEdit, _correlationIdEdit, props, _contentTypeEdit, idToUse);
            }
            else if (!string.IsNullOrWhiteSpace(TopicName))
            {
                await Messaging.SendToTopicAsync(ConnectionString, TopicName!, _bodyEdit, _subjectEdit, _correlationIdEdit, props, _contentTypeEdit, idToUse);
            }

            // Optionally remove original DLQ
            if (_removeOriginal)
            {
                var removed = false;
                if (!string.IsNullOrWhiteSpace(QueueName))
                {
                    removed = await Messaging.RemoveQueueDeadLetterMessageAsync(ConnectionString, QueueName!, Details.SequenceNumber);
                }
                else if (!string.IsNullOrWhiteSpace(TopicName) && !string.IsNullOrWhiteSpace(SubscriptionName))
                {
                    removed = await Messaging.RemoveSubscriptionDeadLetterMessageAsync(ConnectionString, TopicName!, SubscriptionName!, Details.SequenceNumber);
                }
                if (!removed)
                    Snackbar.Add("Resubmitted, but failed to remove original from DLQ (not found within scan window).", Severity.Warning);
            }

            Snackbar.Add($"Message resubmitted to {GetTargetLabel()}.", Severity.Success);
            MudDialog?.Close(DialogResult.Ok(true));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Failed to resubmit message: {ex.Message}", Severity.Error);
        }
        finally
        {
            _submitting = false;
        }
    }

    // Property editing is handled by KeyValueEditor

    private void TryFormatBodyForDisplay()
    {
        if (string.IsNullOrWhiteSpace(_bodyEdit)) return;
        try
        {
            if (LooksLikeJson(_bodyEdit))
            {
                using var doc = JsonDocument.Parse(_bodyEdit);
                _bodyEdit = JsonSerializer.Serialize(doc, new JsonSerializerOptions { WriteIndented = true });
                return;
            }
            if (LooksLikeXml(_bodyEdit))
            {
                var x = XDocument.Parse(_bodyEdit);
                _bodyEdit = x.ToString(SaveOptions.None);
                return;
            }
        }
        catch { /* ignore formatting issues */ }
    }

    private bool LooksLikeJson(string s)
    {
        var t = s?.TrimStart();
        return !string.IsNullOrEmpty(t) && (t.StartsWith("{") || t.StartsWith("[") || (_contentTypeEdit?.Contains("json", StringComparison.OrdinalIgnoreCase) == true));
    }

    private bool LooksLikeXml(string s)
    {
        var t = s?.TrimStart();
        return !string.IsNullOrEmpty(t) && (t.StartsWith("<") || (_contentTypeEdit?.Contains("xml", StringComparison.OrdinalIgnoreCase) == true));
    }

    private void BuildSystemProps()
    {
        var dict = new Dictionary<string, string>(StringComparer.Ordinal);
        void Add(string k, string? v)
        {
            if (!string.IsNullOrWhiteSpace(v)) dict[k] = v;
        }

        Add("Sequence Number", Details.SequenceNumber.ToString());
        Add("Enqueued", FormatDate(Details.EnqueuedTime));
        if (Details.ExpiresAt is { } exp) Add("Expires At", FormatDate(exp));
        if (Details.ScheduledEnqueueTime is { } sch) Add("Scheduled Enqueue", FormatDate(sch));
        Add("Delivery Count", Details.DeliveryCount.ToString());
        Add("MessageId", _messageIdEdit);
        Add("Subject", _subjectEdit);
        Add("CorrelationId", _correlationIdEdit);
        Add("Content Type", _contentTypeEdit);
        Add("To", Details.To);
        Add("ReplyTo", Details.ReplyTo);
        Add("SessionId", Details.SessionId);
        Add("PartitionKey", Details.PartitionKey);
        Add("ReplyToSessionId", Details.ReplyToSessionId);
        Add("Time To Live", Details.TimeToLive.ToString());
        Add("DeadLetterSource", Details.DeadLetterSource);
        Add("DeadLetterReason", Details.DeadLetterReason);
        Add("DeadLetterErrorDescription", Details.DeadLetterErrorDescription);

        _systemPropDict = dict;
    }

    private async Task CopyAppPropsAsJsonAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(_propertyDict ?? new Dictionary<string, string>(), new JsonSerializerOptions { WriteIndented = true });
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", json);
            Snackbar.Add("Application properties copied to clipboard.", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Failed to copy application properties.", Severity.Error);
        }
    }

    private async Task CopySystemPropsAsJsonAsync()
    {
        try
        {
            var json = JsonSerializer.Serialize(_systemPropDict ?? new Dictionary<string, string>(), new JsonSerializerOptions { WriteIndented = true });
            await JS.InvokeVoidAsync("navigator.clipboard.writeText", json);
            Snackbar.Add("System properties copied to clipboard.", Severity.Success);
        }
        catch
        {
            Snackbar.Add("Failed to copy system properties.", Severity.Error);
        }
    }
}
