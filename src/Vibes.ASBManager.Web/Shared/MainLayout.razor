@inherits LayoutComponentBase
@using Vibes.ASBManager.Web.Models
@implements IDisposable
@inject IConnectionStore ConnectionStore
@inject IDialogService DialogService
@inject NavigationManager Nav
@inject ProtectedLocalStorage LocalStorage

<MudThemeProvider Theme="@CeruleanTheme" IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="ToggleDrawer" />
        <MudIcon Icon="@Icons.Material.Filled.Hub" Class="mr-2" />
        <MudText Typo="Typo.h6">ASB Explorer</MudText>
        <MudSpacer />
        <MudIconButton Color="Color.Inherit"
                       Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="ToggleDarkMode" />
    </MudAppBar>
    <MudDrawer Elevation="1"
               Variant="DrawerVariant.Responsive"
               Open="@_drawerOpen"
               Anchor="Anchor.Left"
               ClipMode="DrawerClipMode.Never">
        <MudDrawerHeader>
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="w-100">
                <MudText Typo="Typo.subtitle1">Connections</MudText>
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog">Add</MudButton>
            </MudStack>
        </MudDrawerHeader>
        <MudNavMenu Dense="true">
            @if (_connections is null)
            {
                <MudText Typo="Typo.caption" Class="mx-3 my-2 mud-text-disabled">Loading...</MudText>
            }
            else if (_connections.Count == 0)
            {
                <MudText Typo="Typo.caption" Class="mx-3 my-2">No connections</MudText>
            }
            else
            {
                @foreach (var c in GetOrderedConnections())
                {
                    <MudStack Row="true" AlignItems="AlignItems.Start" Class="mx-2 my-2">
                        <MudIconButton Icon="@(c.Pinned ? Icons.Material.Filled.Star : Icons.Material.Outlined.StarBorder)"
                                       Color="@(c.Pinned ? Color.Warning : Color.Default)"
                                       Size="Size.Small"
                                       OnClick="@(()=> TogglePinnedAsync(c))" Class="mr-2" />
                        <MudStack Spacing="0" Class="flex-grow-1">
                            <MudNavLink Href="@($"/?connectionId={c.Id}")" Match="NavLinkMatch.All">
                                <MudStack Row="true" AlignItems="AlignItems.Center" Spacing="1">
                                    <MudIcon Icon="@Icons.Material.Filled.Hub" />
                                    <MudText Typo="Typo.body2">@c.Name</MudText>
                                </MudStack>
                            </MudNavLink>
                            @if (c.Tags is not null && c.Tags.Count > 0)
                            {
                                <div class="mt-1">
                                    @foreach (var t in c.Tags)
                                    {
                                        <MudChip T="string" Variant="Variant.Outlined" Size="Size.Small" Class="mr-1 mb-1">@t</MudChip>
                                    }
                                </div>
                            }
                        </MudStack>
                    </MudStack>
                }
            }
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    private bool _drawerOpen = true;
    private IReadOnlyList<ConnectionInfo>? _connections;

    private MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#4F46E5", // Indigo 600
            Secondary = "#06B6D4", // Cyan 500
            Info = "#3B82F6",
            Success = "#10B981",
            Warning = "#F59E0B",
            Error = "#EF4444"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#6366F1",
            Secondary = "#22D3EE",
            Info = "#60A5FA",
            Success = "#34D399",
            Warning = "#FBBF24",
            Error = "#F87171"
        },
        LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "8px"
        }
    };
    
    public static readonly MudTheme CeruleanTheme = new()
    {
        PaletteLight = new PaletteLight()
        {
            Black = "#000",
            White = "#fff",
            Primary = "#2fa4e7ff",
            PrimaryContrastText = "#d5edfaff",
            Secondary = "#e9ecef",
            SecondaryContrastText = "#495057ff",
            Tertiary = "#dee2e6ff",
            TertiaryContrastText = "#495057ff",
            Info = "#033c73",
            InfoContrastText = "#cdd8e3",
            Success = "#73a839",
            SuccessContrastText = "#e3eed7",
            Warning = "#dd5600",
            WarningContrastText = "#f8ddcc",
            Error = "rgba(244,67,54,1)",
            ErrorContrastText = "rgba(255,255,255,1)",
            Dark = "#343a40",
            DarkContrastText = "#ced4da",
            TextPrimary = "#13425cff",
            TextSecondary = "#5d5e60",
            TextDisabled = "rgba(0,0,0,0.3764705882352941)",
            ActionDefault = "rgba(0,0,0,0.5372549019607843)",
            ActionDisabled = "rgba(0,0,0,0.25882352941176473)",
            ActionDisabledBackground = "rgba(0,0,0,0.11764705882352941)",
            Background = "rgba(255,255,255,1)",
            BackgroundGray = "rgba(245,245,245,1)",
            Surface = "rgba(255,255,255,1)",
            DrawerBackground = "#e9ecefff",
            DrawerText = "#495057ff",
            DrawerIcon = "#e9ecef",
            AppbarBackground = "#2fa4e7ff",
            AppbarText = "#d5edfaff",
            LinesDefault = "rgba(0,0,0,0.11764705882352941)",
            LinesInputs = "rgba(189,189,189,1)",
            TableLines = "rgba(224,224,224,1)",
            TableStriped = "rgba(0,0,0,0.0196078431372549)",
            TableHover = "rgba(0,0,0,0.0392156862745098)",
            Divider = "rgba(224,224,224,1)",
            DividerLight = "rgba(0,0,0,0.8)",
            PrimaryDarken = "#13425c",
            PrimaryLighten = "#d5edfa",
            SecondaryDarken = "#5d5e60",
            SecondaryLighten = "#fbfbfc",
            TertiaryDarken = "rgba(73, 80, 87, 0.5)",
            TertiaryLighten = "rgba(73, 80, 87, 0.5)",
            InfoDarken = "#01182e",
            InfoLighten = "#cdd8e3",
            SuccessDarken = "#2e4317",
            SuccessLighten = "#e3eed7",
            WarningDarken = "#582200",
            WarningLighten = "#f8ddcc",
            ErrorDarken = "rgb(242,28,13)",
            ErrorLighten = "rgb(246,96,85)",
            DarkDarken = "rgb(46,46,46)",
            DarkLighten = "rgb(87,87,87)",
            HoverOpacity = 0.06,
            RippleOpacity = 0.1,
            RippleOpacitySecondary = 0.2,
            GrayDefault = "#9E9E9E",
            GrayLight = "#BDBDBD",
            GrayLighter = "#E0E0E0",
            GrayDark = "#757575",
            GrayDarker = "#616161",
            OverlayDark = "rgba(33,33,33,0.4980392156862745)",
            OverlayLight = "rgba(255,255,255,0.4980392156862745)",
        },
        PaletteDark = new PaletteDark()
        {
            Black = "#000",
            White = "#fff",
            Primary = "#2fa4e7ff",
            PrimaryContrastText = "#d5edfaff",
            Secondary = "#e9ecef",
            SecondaryContrastText = "#2f2f30",
            Tertiary = "rgba(222, 226, 230, 0.5)",
            TertiaryContrastText = "#2b3035",
            Info = "#026e8eff",
            InfoContrastText = "#010c17",
            Success = "#73a839",
            SuccessContrastText = "#17220b",
            Warning = "#dd5600",
            WarningContrastText = "#2c1100",
            Error = "rgba(244,67,54,1)",
            ErrorContrastText = "rgba(255,255,255,1)",
            Dark = "#343a40ff",
            DarkContrastText = "#1a1d20",
            TextPrimary = "#82c8f1",
            TextSecondary = "#f2f4f5",
            TextDisabled = "rgba(255,255,255,0.2)",
            ActionDefault = "rgba(173,173,177,1)",
            ActionDisabled = "rgba(255,255,255,0.25882352941176473)",
            ActionDisabledBackground = "rgba(255,255,255,0.11764705882352941)",
            Background = "rgba(50,51,61,1)",
            BackgroundGray = "rgba(39,39,47,1)",
            Surface = "#212529ff",
            DrawerBackground = "#2f2f30ff",
            DrawerText = "#e9ecef",
            DrawerIcon = "#e9ecef",
            AppbarBackground = "#2fa4e7ff",
            AppbarText = "#d5edfaff",
            LinesDefault = "rgba(255,255,255,0.11764705882352941)",
            LinesInputs = "rgba(255,255,255,0.2980392156862745)",
            TableLines = "rgba(255,255,255,0.11764705882352941)",
            TableStriped = "rgba(255,255,255,0.2)",
            Divider = "#ffffff73",
            DividerLight = "#ffffff2e",
            PrimaryDarken = "#82c8f1",
            PrimaryLighten = "#09212e",
            SecondaryDarken = "#f2f4f5",
            SecondaryLighten = "#2f2f30",
            TertiaryDarken = "rgba(222, 226, 230, 0.5)",
            TertiaryLighten = "rgba(222, 226, 230, 0.5)",
            InfoDarken = "#688aab",
            InfoLighten = "#010c17",
            SuccessDarken = "#abcb88",
            SuccessLighten = "#17220b",
            WarningDarken = "#eb9a66",
            WarningLighten = "#2c1100",
            ErrorDarken = "rgb(242,28,13)",
            ErrorLighten = "rgb(246,96,85)",
            DarkDarken = "rgb(23,23,28)",
            DarkLighten = "rgb(56,56,67)",
        },
        LayoutProperties = new LayoutProperties()
        {
            DefaultBorderRadius = "4px",
            DrawerMiniWidthLeft = "56px",
            DrawerMiniWidthRight = "56px",
            DrawerWidthLeft = "300px",
            DrawerWidthRight = "240px",
            AppbarHeight = "64px",
        },
        Typography = new Typography()
        {
            Default = new DefaultTypography
            {
                FontFamily = ["Roboto", "Helvetica", "Arial", "sans-serif"],
                FontWeight = "400",
                FontSize = ".875rem",
                LineHeight = "1.43",
                LetterSpacing = ".01071em",
                TextTransform = "none",
            },
            H1 = new H1Typography
            {
                FontWeight = "300",
                FontSize = "6rem",
                LineHeight = "1.167",
                LetterSpacing = "-.01562em",
                TextTransform = "none",
            },
            H2 = new H2Typography
            {
                FontWeight = "300",
                FontSize = "3.75rem",
                LineHeight = "1.2",
                LetterSpacing = "-.00833em",
                TextTransform = "none",
            },
            H3 = new H3Typography
            {
                FontWeight = "400",
                FontSize = "3rem",
                LineHeight = "1.167",
                LetterSpacing = "0",
                TextTransform = "none",
            },
            H4 = new H4Typography
            {
                FontWeight = "400",
                FontSize = "2.125rem",
                LineHeight = "1.235",
                LetterSpacing = ".00735em",
                TextTransform = "none",
            },
            H5 = new H5Typography
            {
                FontWeight = "400",
                FontSize = "1.5rem",
                LineHeight = "1.334",
                LetterSpacing = "0",
                TextTransform = "none",
            },
            H6 = new H6Typography
            {
                FontWeight = "500",
                FontSize = "1.25rem",
                LineHeight = "1.6",
                LetterSpacing = ".0075em",
                TextTransform = "none",
            },
            Subtitle1 = new Subtitle1Typography
            {
                FontWeight = "400",
                FontSize = "1rem",
                LineHeight = "1.75",
                LetterSpacing = ".00938em",
                TextTransform = "none",
            },
            Subtitle2 = new Subtitle2Typography
            {
                FontWeight = "500",
                FontSize = ".875rem",
                LineHeight = "1.57",
                LetterSpacing = ".00714em",
                TextTransform = "none",
            },
            Body1 = new Body1Typography
            {
                FontWeight = "400",
                FontSize = "1rem",
                LineHeight = "1.5",
                LetterSpacing = ".00938em",
                TextTransform = "none",
            },
            Body2 = new Body2Typography
            {
                FontWeight = "400",
                FontSize = ".875rem",
                LineHeight = "1.43",
                LetterSpacing = ".01071em",
                TextTransform = "none",
            },
            Button = new ButtonTypography
            {
                FontWeight = "500",
                FontSize = ".875rem",
                LineHeight = "1.75",
                LetterSpacing = ".02857em",
                TextTransform = "uppercase",
            },
            Caption = new CaptionTypography
            {
                FontWeight = "400",
                FontSize = ".75rem",
                LineHeight = "1.66",
                LetterSpacing = ".03333em",
                TextTransform = "none",
            },
            Overline = new OverlineTypography
            {
                FontWeight = "400",
                FontSize = ".75rem",
                LineHeight = "2.66",
                LetterSpacing = ".08333em",
                TextTransform = "none",
            },
        },
        ZIndex = new ZIndex()
        {
            Drawer = 1100,
            Popover = 1200,
            AppBar = 1300,
            Dialog = 1400,
            Snackbar = 1500,
            Tooltip = 1600,
        },
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await LocalStorage.GetAsync<bool>("asb:theme:dark");
            _isDarkMode = res.Success ? res.Value : false;
        }
        catch
        {
            _isDarkMode = false;
        }
        // Load connections initially and refresh when navigation occurs (e.g., after adding a connection)
        _ = LoadConnectionsAsync();
        Nav.LocationChanged += OnLocationChanged;
    }

    private async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        try { await LocalStorage.SetAsync("asb:theme:dark", _isDarkMode); } catch { }
        StateHasChanged();
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private async Task LoadConnectionsAsync()
    {
        try
        {
            _connections = await ConnectionStore.GetAllAsync();
        }
        catch
        {
            _connections = Array.Empty<ConnectionInfo>();
        }
        StateHasChanged();
    }

    private async Task TogglePinnedAsync(ConnectionInfo c)
    {
        if (c is null) return;
        c.Pinned = !c.Pinned;
        try { await ConnectionStore.SaveAsync(c); } catch { }
        await LoadConnectionsAsync();
    }

    private IEnumerable<ConnectionInfo> GetOrderedConnections()
    {
        // Store returns ordered by pinned desc, name asc
        return _connections ?? Array.Empty<ConnectionInfo>();
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddConnectionDialog>("Add Connection", new DialogParameters(), options);
        var result = await dialog.Result;
        if (result is { Canceled: false, Data: AddConnectionRequest req })
        {
            var cs = req.ConnectionString?.Trim() ?? string.Empty;
            if (!string.IsNullOrWhiteSpace(cs))
            {
                var nameCandidate = string.IsNullOrWhiteSpace(req.Name) ? GetNameFromConnectionString(cs) : req.Name.Trim();
                if (string.IsNullOrWhiteSpace(nameCandidate))
                    nameCandidate = "connection";

                var info = new ConnectionInfo
                {
                    Name = nameCandidate,
                    ConnectionString = cs,
                    Tags = (req.Tags ?? new List<string>()).ToList()
                };
                info.NormalizeTags();

                await ConnectionStore.SaveAsync(info);
                await LoadConnectionsAsync();
                Nav.NavigateTo($"/?connectionId={info.Id}");
            }
        }
    }

    private static string? GetEndpointFromConnectionString(string cs)
    {
        if (string.IsNullOrWhiteSpace(cs)) return null;
        try
        {
            var part = cs.Split(';', StringSplitOptions.RemoveEmptyEntries)
                .FirstOrDefault(p => p.TrimStart().StartsWith("Endpoint=", StringComparison.OrdinalIgnoreCase));
            if (part is null) return null;
            var idx = part.IndexOf('=');
            if (idx < 0 || idx + 1 >= part.Length) return null;
            var value = part[(idx + 1)..].Trim();
            return value;
        }
        catch
        {
            return null;
        }
    }

    private static string? GetNameFromConnectionString(string cs)
    {
        var endpoint = GetEndpointFromConnectionString(cs);
        if (string.IsNullOrWhiteSpace(endpoint)) return null;
        try
        {
            var uri = new Uri(endpoint);
            var host = uri.Host; // e.g. myns.servicebus.windows.net
            if (string.IsNullOrWhiteSpace(host)) return null;
            var first = host.Split('.').FirstOrDefault();
            return string.IsNullOrWhiteSpace(first) ? host : first;
        }
        catch
        {
            // Fallback parsing
            var trimmed = endpoint.Replace("sb://", string.Empty, StringComparison.OrdinalIgnoreCase);
            var hostPart = trimmed.Split('/')[0];
            var first = hostPart.Split('.').FirstOrDefault();
            return string.IsNullOrWhiteSpace(first) ? hostPart : first;
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadConnectionsAsync();
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
    }
}