@inherits LayoutComponentBase
@using Vibes.ASBManager.Web.Models
@implements IDisposable
@inject IConnectionStore ConnectionStore
@inject IDialogService DialogService
@inject NavigationManager Nav
@inject ProtectedLocalStorage LocalStorage

<MudThemeProvider Theme="@_theme" IsDarkMode="@_isDarkMode" />
<MudPopoverProvider />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Color="Color.Primary" Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" OnClick="ToggleDrawer" />
        <MudIcon Icon="@Icons.Material.Filled.Hub" Class="mr-2" />
        <MudText Typo="Typo.h6">ASB Explorer</MudText>
        <MudSpacer />
        <MudIconButton Color="Color.Inherit"
                       Icon="@(_isDarkMode ? Icons.Material.Filled.LightMode : Icons.Material.Filled.DarkMode)"
                       OnClick="ToggleDarkMode" />
    </MudAppBar>
    <MudDrawer Elevation="1"
               Variant="DrawerVariant.Responsive"
               Open="@_drawerOpen"
               Anchor="Anchor.Left"
               ClipMode="DrawerClipMode.Never">
        <MudDrawerHeader>
            <MudStack Row="true" AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="w-100">
                <MudText Typo="Typo.subtitle1">Connections</MudText>
                <MudButton Size="Size.Small" Variant="Variant.Outlined" Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" OnClick="OpenAddDialog">Add</MudButton>
            </MudStack>
        </MudDrawerHeader>
        <MudNavMenu Dense="true">
            @if (_connections is null)
            {
                <MudText Typo="Typo.caption" Class="mx-3 my-2 mud-text-disabled">Loading...</MudText>
            }
            else if (_connections.Count == 0)
            {
                <MudText Typo="Typo.caption" Class="mx-3 my-2">No connections</MudText>
            }
            else
            {
                @foreach (var c in _connections)
                {
                    <MudNavLink Href="@($"/?connectionId={c.Id}")" Match="NavLinkMatch.All">
                        <MudIcon Icon="@Icons.Material.Filled.Hub" Class="mr-2" />
                        @c.Name
                    </MudNavLink>
                }
            }
        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pa-4">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    private bool _isDarkMode;
    private bool _drawerOpen = true;
    private IReadOnlyList<ConnectionInfo>? _connections;

    private MudTheme _theme = new()
    {
        PaletteLight = new PaletteLight
        {
            Primary = "#4F46E5", // Indigo 600
            Secondary = "#06B6D4", // Cyan 500
            Info = "#3B82F6",
            Success = "#10B981",
            Warning = "#F59E0B",
            Error = "#EF4444"
        },
        PaletteDark = new PaletteDark
        {
            Primary = "#6366F1",
            Secondary = "#22D3EE",
            Info = "#60A5FA",
            Success = "#34D399",
            Warning = "#FBBF24",
            Error = "#F87171"
        },
        LayoutProperties = new LayoutProperties
        {
            DefaultBorderRadius = "8px"
        }
    };

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var res = await LocalStorage.GetAsync<bool>("asb:theme:dark");
            _isDarkMode = res.Success ? res.Value : false;
        }
        catch
        {
            _isDarkMode = false;
        }
        // Load connections initially and refresh when navigation occurs (e.g., after adding a connection)
        _ = LoadConnectionsAsync();
        Nav.LocationChanged += OnLocationChanged;
    }

    private async Task ToggleDarkMode()
    {
        _isDarkMode = !_isDarkMode;
        try { await LocalStorage.SetAsync("asb:theme:dark", _isDarkMode); } catch { }
        StateHasChanged();
    }

    private void ToggleDrawer() => _drawerOpen = !_drawerOpen;

    private async Task LoadConnectionsAsync()
    {
        try
        {
            _connections = await ConnectionStore.GetAllAsync();
        }
        catch
        {
            _connections = Array.Empty<ConnectionInfo>();
        }
        StateHasChanged();
    }

    private async Task OpenAddDialog()
    {
        var options = new DialogOptions { CloseButton = true, MaxWidth = MaxWidth.Medium, FullWidth = true };
        var dialog = await DialogService.ShowAsync<AddConnectionDialog>("Add Connection", new DialogParameters(), options);
        var result = await dialog.Result;
        if (result is { Canceled: false, Data: AddConnectionRequest req })
        {
            var cs = req.ConnectionString?.Trim() ?? string.Empty;
            if (!string.IsNullOrWhiteSpace(cs))
            {
                var nameCandidate = string.IsNullOrWhiteSpace(req.Name) ? GetNameFromConnectionString(cs) : req.Name.Trim();
                if (string.IsNullOrWhiteSpace(nameCandidate))
                    nameCandidate = "connection";

                var info = new ConnectionInfo
                {
                    Name = nameCandidate,
                    ConnectionString = cs,
                    Tags = (req.Tags ?? new List<string>()).ToList()
                };
                info.NormalizeTags();

                await ConnectionStore.SaveAsync(info);
                await LoadConnectionsAsync();
                Nav.NavigateTo($"/?connectionId={info.Id}");
            }
        }
    }

    private static string? GetEndpointFromConnectionString(string cs)
    {
        if (string.IsNullOrWhiteSpace(cs)) return null;
        try
        {
            var part = cs.Split(';', StringSplitOptions.RemoveEmptyEntries)
                .FirstOrDefault(p => p.TrimStart().StartsWith("Endpoint=", StringComparison.OrdinalIgnoreCase));
            if (part is null) return null;
            var idx = part.IndexOf('=');
            if (idx < 0 || idx + 1 >= part.Length) return null;
            var value = part[(idx + 1)..].Trim();
            return value;
        }
        catch
        {
            return null;
        }
    }

    private static string? GetNameFromConnectionString(string cs)
    {
        var endpoint = GetEndpointFromConnectionString(cs);
        if (string.IsNullOrWhiteSpace(endpoint)) return null;
        try
        {
            var uri = new Uri(endpoint);
            var host = uri.Host; // e.g. myns.servicebus.windows.net
            if (string.IsNullOrWhiteSpace(host)) return null;
            var first = host.Split('.').FirstOrDefault();
            return string.IsNullOrWhiteSpace(first) ? host : first;
        }
        catch
        {
            // Fallback parsing
            var trimmed = endpoint.Replace("sb://", string.Empty, StringComparison.OrdinalIgnoreCase);
            var hostPart = trimmed.Split('/')[0];
            var first = hostPart.Split('.').FirstOrDefault();
            return string.IsNullOrWhiteSpace(first) ? hostPart : first;
        }
    }

    private async void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        await LoadConnectionsAsync();
    }

    public void Dispose()
    {
        Nav.LocationChanged -= OnLocationChanged;
    }
}