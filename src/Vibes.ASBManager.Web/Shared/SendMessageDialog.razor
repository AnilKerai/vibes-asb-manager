@using Vibes.ASBManager.Web.Models
@inject ISnackbar Snackbar
<MudDialog>
    <TitleContent>@Title</TitleContent>
    <DialogContent>
        <MudForm @ref="_form">
            <MudTextField T="string" Label="Subject" @bind-Value="Model.Subject" tabindex="1" />
            <MudTextField T="string" Label="Correlation Id" @bind-Value="Model.CorrelationId" tabindex="2" />
            <MudAutocomplete T="string" Label="Content Type" @bind-Value="Model.ContentType" SearchFunc="SearchContentTypes" Clearable="true" tabindex="3" />
            <CodeEditor @bind-Value="Model.Body" ContentType="Model.ContentType" Lines="12" Placeholder="Body" />
            <MudText Typo="Typo.subtitle2" Class="mt-2">Application Properties</MudText>
            <KeyValueEditor @bind-Value="Model.Properties" />

            <MudDivider Class="my-2" />
            <MudText Typo="Typo.subtitle2">Schedule (optional)</MudText>
            <MudSwitch T="bool" Value="_useSchedule" ValueChanged="OnScheduleChanged" Color="Color.Primary" Label="Schedule for later" />
            @if (_useSchedule)
            {
                <MudStack Row="true" Spacing="2">
                    <MudDatePicker Label="Date (local)" @bind-Date="_scheduleDate" Editable="true" Clearable="true" />
                    <MudTimePicker Label="Time (local)" @bind-Time="_scheduleTime" AmPm="false" Editable="true" Clearable="true" />
                </MudStack>
                <MudText Typo="Typo.caption">Times are treated as your local timezone and converted to UTC when sending.</MudText>
                <MudText Typo="Typo.caption" Class="mt-1">@GetSchedulePreview()</MudText>
            }

            <MudNumericField T="int" Label="Count" @bind-Value="Model.Count" Min="1" Max="1000" Immediate="true" tabindex="6" />
            <MudNumericField T="int" Label="Interval (seconds; 0 for none)" @bind-Value="Model.IntervalSeconds" Min="0" Max="3600" Immediate="true" tabindex="7" />
        </MudForm>
        @if (OperatingSystem.IsMacCatalyst())
        {
            <MudAlert Severity="Severity.Info" Dense="true" Class="mt-2">
                Tip: On macOS, Tab navigation may be disabled by system settings. Enable "Keyboard navigation" in System Settings â†’ Keyboard to move focus between controls.
            </MudAlert>
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="OnCancel" tabindex="8">Cancel</MudButton>
        <MudButton Color="Color.Primary" Variant="Variant.Filled" OnClick="Send" tabindex="9">Send</MudButton>
    </DialogActions>
</MudDialog>

@code {
    [CascadingParameter] private IMudDialogInstance? MudDialog { get; set; }
    [Parameter] public string Title { get; set; } = "Send Message(s)";

    private MudForm? _form;
    private bool _useSchedule;
    private DateTime? _scheduleDate;
    private TimeSpan? _scheduleTime;

    public SendMessageRequest Model { get; set; } = new();

    // Popular/common content types to suggest in the autocomplete
    private static readonly string[] CommonContentTypes =
    [
        "application/json",
        "text/plain",
        "application/xml",
        "text/xml",
        "text/json",
        "application/octet-stream",
        "application/x-www-form-urlencoded",
        "application/ld+json",
        "text/csv",
        "application/pdf",
        "application/zip",
        "image/png",
        "image/jpeg",
        "application/vnd.ms-excel",
        "application/msword"
    ];

    private Task<IEnumerable<string>> SearchContentTypes(string value, CancellationToken _)
    {
        var result = string.IsNullOrWhiteSpace(value)
            ? CommonContentTypes
            : CommonContentTypes.Where(x => x.Contains(value, StringComparison.OrdinalIgnoreCase));
        return Task.FromResult(result);
    }

    private async Task Send()
    {
        if (_form is not null)
        {
            await _form.Validate();
            if (!_form.IsValid)
                return;
        }

        if (string.IsNullOrWhiteSpace(Model.Body))
        {
            Snackbar.Add("Body is required.", Severity.Warning);
            return;
        }

        // Compute scheduled time only when toggle is ON
        Model.ScheduledEnqueueUtc = null;
        if (_useSchedule)
        {
            if (!_scheduleDate.HasValue || !_scheduleTime.HasValue)
            {
                Snackbar.Add("Please select both schedule date and time.", Severity.Warning);
                return;
            }
            try
            {
                var d = _scheduleDate.Value.Date;
                var t = _scheduleTime.Value;
                var local = new DateTime(d.Year, d.Month, d.Day, t.Hours, t.Minutes, t.Seconds, DateTimeKind.Local);
                var dtoLocal = new DateTimeOffset(local);
                var utc = dtoLocal.ToUniversalTime();
                if (utc <= DateTimeOffset.UtcNow.AddSeconds(5))
                {
                    Snackbar.Add("Scheduled time must be in the future.", Severity.Warning);
                    return;
                }
                Model.ScheduledEnqueueUtc = utc;
                Snackbar.Add($"Scheduling for {local:G} (local)", Severity.Info);
            }
            catch
            {
                Snackbar.Add("Invalid schedule values.", Severity.Error);
                return;
            }
        }

        // Properties are already bound via KeyValueEditor to Model.Properties

        MudDialog?.Close(DialogResult.Ok(Model));
    }

    private void OnCancel() => MudDialog?.Cancel();

    private void OnScheduleChanged(bool value)
    {
        _useSchedule = value;
        if (value)
        {
            _scheduleDate ??= DateTime.Today;
            if (!_scheduleTime.HasValue)
            {
                var now = DateTime.Now.AddMinutes(5);
                _scheduleTime = new TimeSpan(now.Hour, now.Minute, 0);
            }
        }
        StateHasChanged();
    }

    private string GetSchedulePreview()
    {
        if (!_scheduleDate.HasValue || !_scheduleTime.HasValue) return "No schedule set.";
        try
        {
            var d = _scheduleDate.Value.Date;
            var t = _scheduleTime.Value;
            var local = new DateTime(d.Year, d.Month, d.Day, t.Hours, t.Minutes, t.Seconds, DateTimeKind.Local);
            var utc = new DateTimeOffset(local).ToUniversalTime();
            return $"Will schedule at {local:G} (local), {utc:u} UTC.";
        }
        catch
        {
            return "Invalid schedule.";
        }
    }
}
