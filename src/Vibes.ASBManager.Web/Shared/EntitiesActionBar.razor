<MudPaper Class="pa-2 mb-2 d-flex align-center" Elevation="1" Style="gap:8px;">
    <MudButton Variant="Variant.Filled" Color="Color.Primary" Disabled="@(!CanLoad)" OnClick="@OnRefresh">
        <MudIcon Icon="@Icons.Material.Filled.Refresh" />
        <span class="ms-1">Refresh</span>
    </MudButton>

    <MudDivider Vertical="true" Class="mx-2" />

    <MudButton Variant="Variant.Outlined" Disabled="@(!CanSend)" OnClick="@OnSend">
        <MudIcon Icon="@Icons.Material.Filled.Send" />
        <span class="ms-1">Send Message(s)</span>
    </MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Error" Disabled="@(!CanPurgeActive)" OnClick="@OnPurgeActive">
        <MudIcon Icon="@Icons.Material.Filled.DeleteSweep" />
        <span class="ms-1">Purge Active</span>
    </MudButton>
    <MudButton Variant="Variant.Outlined" Color="Color.Error" Disabled="@(!CanPurgeDlq)" OnClick="@OnPurgeDlq">
        <MudIcon Icon="@Icons.Material.Filled.DeleteForever" />
        <span class="ms-1">Purge DLQ</span>
    </MudButton>

    @if (HasConnection && (SelectedIsRoot || SelectedIsQueuesFolder || SelectedIsTopicsFolder))
    {
        @if (SelectedIsRoot)
        {
            <MudButton Variant="Variant.Outlined" OnClick="@OnCreateQueue">
                <MudIcon Icon="@Icons.Material.Filled.Add" />
                <span class="ms-1">New Queue</span>
            </MudButton>
            <MudButton Variant="Variant.Outlined" OnClick="@OnCreateTopic">
                <MudIcon Icon="@Icons.Material.Filled.Add" />
                <span class="ms-1">New Topic</span>
            </MudButton>
        }
        else if (SelectedIsQueuesFolder)
        {
            <MudButton Variant="Variant.Outlined" OnClick="@OnCreateQueue">
                <MudIcon Icon="@Icons.Material.Filled.Add" />
                <span class="ms-1">New Queue</span>
            </MudButton>
        }
        else if (SelectedIsTopicsFolder)
        {
            <MudButton Variant="Variant.Outlined" OnClick="@OnCreateTopic">
                <MudIcon Icon="@Icons.Material.Filled.Add" />
                <span class="ms-1">New Topic</span>
            </MudButton>
        }
    }

    @if (SelectedIsQueue)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@OnDeleteQueue">
            <MudIcon Icon="@Icons.Material.Filled.Delete" />
            <span class="ms-1">Delete Queue</span>
        </MudButton>
    }
    @if (SelectedIsTopic)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="@OnDeleteTopic">
            <MudIcon Icon="@Icons.Material.Filled.Delete" />
            <span class="ms-1">Delete Topic</span>
        </MudButton>
    }

    @if (SelectedIsTopic)
    {
        <MudButton Variant="Variant.Outlined" Disabled="@(!CanCreateSubscriptionAction)" OnClick="@OnCreateSubscription">
            <MudIcon Icon="@Icons.Material.Filled.Add" />
            <span class="ms-1">New Subscription</span>
        </MudButton>
    }
    @if (SelectedIsSubscription)
    {
        <MudButton Variant="Variant.Outlined" Color="Color.Error" Disabled="@(!CanDeleteSubscriptionAction)" OnClick="@OnDeleteSubscription">
            <MudIcon Icon="@Icons.Material.Filled.Delete" />
            <span class="ms-1">Delete Subscription</span>
        </MudButton>
    }

    <MudSpacer />
    <MudText Typo="Typo.caption">Selected: @SelectedFriendly</MudText>
</MudPaper>

@code {
    [Parameter] public bool HasConnection { get; set; }
    [Parameter] public bool CanLoad { get; set; }
    [Parameter] public bool CanSend { get; set; }
    [Parameter] public bool CanPurgeActive { get; set; }
    [Parameter] public bool CanPurgeDlq { get; set; }
    [Parameter] public bool CanCreateSubscriptionAction { get; set; }
    [Parameter] public bool CanDeleteSubscriptionAction { get; set; }

    [Parameter] public bool SelectedIsRoot { get; set; }
    [Parameter] public bool SelectedIsQueuesFolder { get; set; }
    [Parameter] public bool SelectedIsTopicsFolder { get; set; }
    [Parameter] public bool SelectedIsQueue { get; set; }
    [Parameter] public bool SelectedIsTopic { get; set; }
    [Parameter] public bool SelectedIsSubscription { get; set; }

    [Parameter] public string SelectedFriendly { get; set; } = string.Empty;

    [Parameter] public EventCallback OnRefresh { get; set; }
    [Parameter] public EventCallback OnSend { get; set; }
    [Parameter] public EventCallback OnPurgeActive { get; set; }
    [Parameter] public EventCallback OnPurgeDlq { get; set; }
    [Parameter] public EventCallback OnCreateQueue { get; set; }
    [Parameter] public EventCallback OnCreateTopic { get; set; }
    [Parameter] public EventCallback OnCreateSubscription { get; set; }
    [Parameter] public EventCallback OnDeleteQueue { get; set; }
    [Parameter] public EventCallback OnDeleteTopic { get; set; }
    [Parameter] public EventCallback OnDeleteSubscription { get; set; }
}
